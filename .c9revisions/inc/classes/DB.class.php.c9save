{"ts":1378762969963,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\n/** A PHP class to access MySQL database with convenient methods\n * in an object oriented way, and with a powerful debug system.\n * @version  1.0\n * @author   Modified by Sean Burke\n * @author   Modified by Sean Burke\n */\nclass DB\n{\n\t/** Put this variable to true if you want ALL queries to be debugged by default:\n\t */\n\tpublic $defaultDebug = false;\n\n\t/** INTERNAL: The start time, in miliseconds.\n\t */\n\tpublic $mtStart;\n\t/** INTERNAL: The number of executed queries.\n\t */\n\tpublic $nbQueries;\n\t/** INTERNAL: The last result ressource of a query().\n\t */\n\tpublic $lastResult;\n\n\tpublic $lastResultArray;\n\n\tpublic $error;\n\n\tpublic $affected_rows;\n\n\tpublic $num_rows;\n\t\n\t/** Connect to a MySQL database to be able to use the methods below.\n\t */\n\tfunction DB()\n\t{\t\n\t\t$this->mtStart    = $this->getMicroTime();\n\t\t$this->nbQueries  = 0;\n\t\t$this->lastResult = NULL;\n\t\tinclude_once 'inc/setup/_config.php';\n\t\tmysql_connect(DBSERVER,  DBUSERNAME, DBPASSWORD) or die('You must first provide your MySQL Credentials in the _config.php Please read the README.md file before proceeding');\n\t\tmysql_select_db(DBDATABASE) or die('You need to run the setup.php in /inc/setup/setup.php');\n\t\tnew MYSQLI();\n\t}\n\n\tfunction real_escape_string($string)\n\t{\n\t\treturn mysql_real_escape_string($string);\n\t}\n\n\t/** Query the database.\n\t * @param $query The query.\n\t * @param $debug If true, it output the query and the resulting table.\n\t * @return The result of the query, to use with fetchNextObject().\n\t */\n\tfunction query($query, $debug = -1)\n\t{\n\t\t$this->nbQueries++;\n\t\t$this->lastResult = mysql_query($query) or $this->debugAndDie($query);\n\t\t$this->debug($debug, $query, $this->lastResult);\n\t\t$this->affected_rows = mysql_affected_rows();\n\t\t$this->num_rows = $this->numRows();\n\t\treturn $this->lastResult;\n\t}\n\t/** Do the same as query() but do not return nor store result.\\n\n\t * Should be used for INSERT, UPDATE, DELETE...\n\t * @param $query The query.\n\t * @param $debug If true, it output the query and the resulting table.\n\t */\n\tfunction execute($query, $debug = -1)\n\t{\n\t\t$this->nbQueries++;\n\t\tmysql_query($query) or $this->debugAndDie($query);\n\t\t$this->debug($debug, $query);\n\t\t$this->affected_rows = mysql_affected_rows();\n\t\t$this->num_rows = $this->numRows();\n\t}\n\t/** Convenient method for mysql_fetch_object().\n\t * @param $result The ressource returned by query(). If NULL, the last result returned by query() will be used.\n\t * @return An object representing a data row.\n\t */\n\tfunction fetchNextObject($result = NULL)\n\t{\n\t\tif ($result == NULL)\n\t\t$result = $this->lastResult;\n\n\t\tif ($result == NULL || mysql_num_rows($result) < 1)\n\t\treturn NULL;\n\t\telse\n\t\treturn mysql_fetch_object($result);\n\t}\n\t/** Get the number of rows of a query.\n\t * @param $result The ressource returned by query(). If NULL, the last result returned by query() will be used.\n\t * @return The number of rows of the query (0 or more).\n\t */\n\tfunction numRows($result = NULL)\n\t{\n\t\tif ($result != NULL)\n\t\treturn mysql_num_rows($result);\n\t\telse\n\t\t{\n\t\t\tif($this->lastResult != NULL)\n\t\t\treturn @mysql_num_rows($this->lastResult);\n\t\t\telse\n\t\t\treturn 0;\n\t\t}\n\t}\n\t/** Get the result of the query as an object. The query should return a unique row.\\n\n\t * Note: no need to add \"LIMIT 1\" at the end of your query because\n\t * the method will add that (for optimisation purpose).\n\t * @param $query The query.\n\t * @param $debug If true, it output the query and the resulting row.\n\t * @return An object representing a data row (or NULL if result is empty).\n\t */\n\tfunction queryUniqueObject($query, $debug = -1)\n\t{\n\t\t$query = \"$query LIMIT 1\";\n\n\t\t$this->nbQueries++;\n\t\t$result = mysql_query($query) or $this->debugAndDie($query);\n\n\t\t$this->debug($debug, $query, $result);\n\t\t$this->affected_rows = mysql_affected_rows();\n\t\t$this->num_rows = $this->numRows();\n\n\t\treturn mysql_fetch_object($result);\n\t}\n\t/** Get the result of the query as value. The query should return a unique cell.\\n\n\t * Note: no need to add \"LIMIT 1\" at the end of your query because\n\t * the method will add that (for optimisation purpose).\n\t * @param $query The query.\n\t * @param $debug If true, it output the query and the resulting value.\n\t * @return A value representing a data cell (or NULL if result is empty).\n\t */\n\tfunction queryUniqueValue($query, $debug = -1)\n\t{\n\t\t$query = \"$query LIMIT 1\";\n\n\t\t$this->nbQueries++;\n\t\t$result = mysql_query($query) or $this->debugAndDie($query);\n\t\t$line = mysql_fetch_row($result);\n\t\t$this->affected_rows = mysql_affected_rows();\n\t\t$this->num_rows = $this->numRows();\n\n\t\t$this->debug($debug, $query, $result);\n\n\t\treturn $line[0];\n\t}\n\t/** Get the maximum value of a column in a table, with a condition.\n\t * @param $column The column where to compute the maximum.\n\t * @param $table The table where to compute the maximum.\n\t * @param $where The condition before to compute the maximum.\n\t * @return The maximum value (or NULL if result is empty).\n\t */\n\tfunction maxOf($column, $table, $where)\n\t{\n\t\treturn $this->queryUniqueValue(\"SELECT MAX(`$column`) FROM `$table` WHERE $where\");\n\t}\n\t/** Get the maximum value of a column in a table.\n\t * @param $column The column where to compute the maximum.\n\t * @param $table The table where to compute the maximum.\n\t * @return The maximum value (or NULL if result is empty).\n\t */\n\tfunction maxOfAll($column, $table)\n\t{\n\t\treturn $this->queryUniqueValue(\"SELECT MAX(`$column`) FROM `$table`\");\n\t}\n\t/** Get the count of rows in a table, with a condition.\n\t * @param $table The table where to compute the number of rows.\n\t * @param $where The condition before to compute the number or rows.\n\t * @return The number of rows (0 or more).\n\t */\n\tfunction countOf($table, $where = '', $debug = -1)\n\t{\n\t\tif($where == '')\n\t\t\treturn $this->countOfAll($table);\n\t\telse\n\t\t\treturn $this->queryUniqueValue(\"SELECT COUNT(*) FROM `$table` WHERE $where\", $debug);\n\t}\n\t/** Get the count of rows in a table.\n\t * @param $table The table where to compute the number of rows.\n\t * @return The number of rows (0 or more).\n\t */\n\tfunction countOfAll($table)\n\t{\n\t\treturn $this->queryUniqueValue(\"SELECT COUNT(*) FROM `$table`\");\n\t}\n\t/** Internal function to debug when MySQL encountered an error,\n\t * even if debug is set to Off.\n\t * @param $query The SQL query to echo before diying.\n\t */\n\tfunction debugAndDie($query)\n\t{\n\t\t$this->debugQuery($query, \"Error\");\n\t\tdie(\"<p style=\\\"margin: 2px;\\\">\".mysql_error().\"</p></div>\");\n\t}\n\t/** Internal function to debug a MySQL query.\\n\n\t * Show the query and output the resulting table if not NULL.\n\t * @param $debug The parameter passed to query() functions. Can be boolean or -1 (default).\n\t * @param $query The SQL query to debug.\n\t * @param $result The resulting table of the query, if available.\n\t */\n\tfunction debug($debug, $query, $result = NULL)\n\t{\n\t\tif ($debug === -1 && $this->defaultDebug === false)\n\t\treturn;\n\t\tif ($debug === false)\n\t\treturn;\n\n\t\t$reason = ($debug === -1 ? \"Default Debug\" : \"Debug\");\n\t\t$this->debugQuery($query, $reason);\n\t\tif ($result == NULL)\n\t\techo \"<p style=\\\"margin: 2px;\\\">Number of affected rows: \".mysql_affected_rows().\"</p></div>\";\n\t\telse\n\t\t$this->debugResult($result);\n\t}\n\t/** Internal function to output a query for debug purpose.\\n\n\t * Should be followed by a call to debugResult() or an echo of \"</div>\".\n\t * @param $query The SQL query to debug.\n\t * @param $reason The reason why this function is called: \"Default Debug\", \"Debug\" or \"Error\".\n\t */\n\tfunction debugQuery($query, $reason = \"Debug\")\n\t{\n\t\t$color = ($reason == \"Error\" ? \"red\" : \"orange\");\n\t\techo \"<div style=\\\"border: solid $color 1px; margin: 2px;\\\">\".\n           \"<p style=\\\"margin: 0 0 2px 0; padding: 0; background-color: #DDF;\\\">\".\n           \"<strong style=\\\"padding: 0 3px; background-color: $color; color: white;\\\">$reason:</strong> \".\n           \"<span style=\\\"font-family: monospace;\\\">\".htmlentities($query).\"</span></p>\";\n\t}\n\t/** Internal function to output a table representing the result of a query, for debug purpose.\\n\n\t * Should be preceded by a call to debugQuery().\n\t * @param $result The resulting table of the query.\n\t */\n\tfunction debugResult($result)\n\t{\n\t\techo \"<table border=\\\"1\\\" style=\\\"margin: 2px;\\\">\".\n           \"<thead style=\\\"font-size: 80%\\\">\";\n\t\t$numFields = mysql_num_fields($result);\n\t\t// BEGIN HEADER\n\t\t$tables    = array();\n\t\t$nbTables  = -1;\n\t\t$lastTable = \"\";\n\t\t$fields    = array();\n\t\t$nbFields  = -1;\n\t\twhile ($column = mysql_fetch_field($result)) {\n\t\t\tif ($column->table != $lastTable) {\n\t\t\t\t$nbTables++;\n\t\t\t\t$tables[$nbTables] = array(\"name\" => $column->table, \"count\" => 1);\n\t\t\t} else\n\t\t\t$tables[$nbTables][\"count\"]++;\n\t\t\t$lastTable = $column->table;\n\t\t\t$nbFields++;\n\t\t\t$fields[$nbFields] = $column->name;\n\t\t}\n\t\tfor ($i = 0; $i <= $nbTables; $i++)\n\t\techo \"<th colspan=\".$tables[$i][\"count\"].\">\".$tables[$i][\"name\"].\"</th>\";\n\t\techo \"</thead>\";\n\t\techo \"<thead style=\\\"font-size: 80%\\\">\";\n\t\tfor ($i = 0; $i <= $nbFields; $i++)\n\t\techo \"<th>\".$fields[$i].\"</th>\";\n\t\techo \"</thead>\";\n\t\t// END HEADER\n\t\twhile ($row = mysql_fetch_array($result)) {\n\t\t\techo \"<tr>\";\n\t\t\tfor ($i = 0; $i < $numFields; $i++)\n\t\t\techo \"<td>\".htmlentities($row[$i]).\"</td>\";\n\t\t\techo \"</tr>\";\n\t\t}\n\t\techo \"</table></div>\";\n\t\t$this->resetFetch($result);\n\t}\n\t/** Get how many time the script took from the begin of this object.\n\t * @return The script execution time in seconds since the\n\t * creation of this object.\n\t */\n\tfunction getExecTime()\n\t{\n\t\treturn round(($this->getMicroTime() - $this->mtStart) * 1000) / 1000;\n\t}\n\t/** Get the number of queries executed from the begin of this object.\n\t * @return The number of queries executed on the database server since the\n\t * creation of this object.\n\t */\n\tfunction getQueriesCount()\n\t{\n\t\treturn $this->nbQueries;\n\t}\n\t/** Go back to the first element of the result line.\n\t * @param $result The resssource returned by a query() function.\n\t */\n\tfunction resetFetch($result)\n\t{\n\t\tif (mysql_num_rows($result) > 0)\n\t\tmysql_data_seek($result, 0);\n\t}\n\t/** Get the id of the very last inserted row.\n\t * @return The id of the very last inserted row (in any table).\n\t */\n\tfunction lastInsertedId()\n\t{\n\t\treturn mysql_insert_id();\n\t}\n\t/** Close the connection with the database server.\\n\n\t * It's usually unneeded since PHP do it automatically at script end.\n\t */\n\tfunction close()\n\t{\n\t\tmysql_close();\n\t}\n\n\t/** Internal method to get the current time.\n\t * @return The current time in seconds with microseconds (in float format).\n\t */\n\tfunction getMicroTime()\n\t{\n\t\tlist($msec, $sec) = explode(' ', microtime());\n\t\treturn floor($sec / 1000) + $msec;\n\t}\n\n\t/** create array from result\n\t *\n\t */\n\tfunction resultToMakeArray($key, $value, $initial = ''){\n\t\tif($initial != '')\n\t\t{\n\t\t\t$res_array[0] = $initial;\n\t\t}\n\t\t$temp_array = $this->resultToArray();\n\t\tif(is_array($temp_array))\n\t\t\tforeach ($temp_array as $row) {\n\t\t\t\t$temp_key = $row[$key];\n\t\t\t\t$temp_value = $row[$value];\n\t\t\t\t$res_array[$temp_key] = $temp_value;\n\t\t\t}\n\t\telse {\n\t\t\t$this->error = 'Cannot make array';\n\t\t\treturn false;\n\t\t}\n\t\t$this->lastResultArray = $res_array;\n\t\treturn $this->lastResultArray;\n\t}\n\t\n\tfunction resultToArray(){\n\t\tfor ($count=0; $row = @mysql_fetch_array($this->lastResult); $count++)\n\t\t$res_array[$count] = $row;\n\t\t\t\n\t\t$this->lastResultArray = $res_array;\n\t\treturn $this->lastResultArray;\n\t}\n\tfunction resultToSingleArray(){\n\t\t$this->lastResultArray = @mysql_fetch_array($this->lastResult);\n\t\treturn $this->lastResultArray;\n\t}\n\n\tfunction lastArray()\n\t{\n\t\treturn $this->lastResultArray;\n\t}\n\n\tfunction getError(){\n\t\treturn mysql_error();\n\t}\n\n\tfunction isEmpty(){\n\t\tif($this->num_rows == 0)\n\t\treturn true;\n\t\telse\n\t\treturn false;\n\t}\n\n} // class DB\n?>\n"]],"start1":0,"start2":0,"length1":0,"length2":11562}]],"length":11562}
